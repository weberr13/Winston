// Code generated by protoc-gen-gogo.
// source: v1.proto
// DO NOT EDIT!

/*
	Package winston is a generated protocol buffer package.

	It is generated from these files:
		v1.proto

	It has these top-level messages:
		PullBucket
		PullResponse
		RepoSettings
		PushRequest
		Row
		EMPTY
*/
package winston

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RepoSettings_Format int32

const (
	RepoSettings_RAW  RepoSettings_Format = 0
	RepoSettings_JSON RepoSettings_Format = 1
)

var RepoSettings_Format_name = map[int32]string{
	0: "RAW",
	1: "JSON",
}
var RepoSettings_Format_value = map[string]int32{
	"RAW":  0,
	"JSON": 1,
}

func (x RepoSettings_Format) String() string {
	return proto.EnumName(RepoSettings_Format_name, int32(x))
}
func (RepoSettings_Format) EnumDescriptor() ([]byte, []int) { return fileDescriptorV1, []int{2, 0} }

type PullBucket struct {
	Repo       string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	StartTime  uint64 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    uint64 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	BucketPath string `protobuf:"bytes,4,opt,name=bucketPath,proto3" json:"bucketPath,omitempty"`
}

func (m *PullBucket) Reset()                    { *m = PullBucket{} }
func (m *PullBucket) String() string            { return proto.CompactTextString(m) }
func (*PullBucket) ProtoMessage()               {}
func (*PullBucket) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{0} }

type PullResponse struct {
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Rows []*Row `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *PullResponse) Reset()                    { *m = PullResponse{} }
func (m *PullResponse) String() string            { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()               {}
func (*PullResponse) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{1} }

type RepoSettings struct {
	Repo      string              `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Format    RepoSettings_Format `protobuf:"varint,2,opt,name=format,proto3,enum=winston.RepoSettings_Format" json:"format,omitempty"`
	DateField string              `protobuf:"bytes,3,opt,name=dateField,proto3" json:"dateField,omitempty"`
	HashField string              `protobuf:"bytes,4,opt,name=hashField,proto3" json:"hashField,omitempty"`
	Buckets   int32               `protobuf:"varint,5,opt,name=buckets,proto3" json:"buckets,omitempty"`
}

func (m *RepoSettings) Reset()                    { *m = RepoSettings{} }
func (m *RepoSettings) String() string            { return proto.CompactTextString(m) }
func (*RepoSettings) ProtoMessage()               {}
func (*RepoSettings) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{2} }

type PushRequest struct {
	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Rows []*Row `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{3} }

type Row struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Time uint64 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{4} }

type EMPTY struct {
}

func (m *EMPTY) Reset()                    { *m = EMPTY{} }
func (m *EMPTY) String() string            { return proto.CompactTextString(m) }
func (*EMPTY) ProtoMessage()               {}
func (*EMPTY) Descriptor() ([]byte, []int) { return fileDescriptorV1, []int{5} }

func init() {
	proto.RegisterType((*PullBucket)(nil), "winston.PullBucket")
	proto.RegisterType((*PullResponse)(nil), "winston.PullResponse")
	proto.RegisterType((*RepoSettings)(nil), "winston.RepoSettings")
	proto.RegisterType((*PushRequest)(nil), "winston.PushRequest")
	proto.RegisterType((*Row)(nil), "winston.Row")
	proto.RegisterType((*EMPTY)(nil), "winston.EMPTY")
	proto.RegisterEnum("winston.RepoSettings_Format", RepoSettings_Format_name, RepoSettings_Format_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for V1 service

type V1Client interface {
	Push(ctx context.Context, opts ...grpc.CallOption) (V1_PushClient, error)
	UpsertRepo(ctx context.Context, in *RepoSettings, opts ...grpc.CallOption) (*EMPTY, error)
	PullBucketByTime(ctx context.Context, in *PullBucket, opts ...grpc.CallOption) (V1_PullBucketByTimeClient, error)
}

type v1Client struct {
	cc *grpc.ClientConn
}

func NewV1Client(cc *grpc.ClientConn) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) Push(ctx context.Context, opts ...grpc.CallOption) (V1_PushClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V1_serviceDesc.Streams[0], c.cc, "/winston.V1/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1PushClient{stream}
	return x, nil
}

type V1_PushClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*EMPTY, error)
	grpc.ClientStream
}

type v1PushClient struct {
	grpc.ClientStream
}

func (x *v1PushClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v1PushClient) CloseAndRecv() (*EMPTY, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EMPTY)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) UpsertRepo(ctx context.Context, in *RepoSettings, opts ...grpc.CallOption) (*EMPTY, error) {
	out := new(EMPTY)
	err := grpc.Invoke(ctx, "/winston.V1/UpsertRepo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) PullBucketByTime(ctx context.Context, in *PullBucket, opts ...grpc.CallOption) (V1_PullBucketByTimeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V1_serviceDesc.Streams[1], c.cc, "/winston.V1/PullBucketByTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1PullBucketByTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_PullBucketByTimeClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type v1PullBucketByTimeClient struct {
	grpc.ClientStream
}

func (x *v1PullBucketByTimeClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for V1 service

type V1Server interface {
	Push(V1_PushServer) error
	UpsertRepo(context.Context, *RepoSettings) (*EMPTY, error)
	PullBucketByTime(*PullBucket, V1_PullBucketByTimeServer) error
}

func RegisterV1Server(s *grpc.Server, srv V1Server) {
	s.RegisterService(&_V1_serviceDesc, srv)
}

func _V1_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1Server).Push(&v1PushServer{stream})
}

type V1_PushServer interface {
	SendAndClose(*EMPTY) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type v1PushServer struct {
	grpc.ServerStream
}

func (x *v1PushServer) SendAndClose(m *EMPTY) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v1PushServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V1_UpsertRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UpsertRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/winston.V1/UpsertRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UpsertRepo(ctx, req.(*RepoSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_PullBucketByTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullBucket)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).PullBucketByTime(m, &v1PullBucketByTimeServer{stream})
}

type V1_PullBucketByTimeServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type v1PullBucketByTimeServer struct {
	grpc.ServerStream
}

func (x *v1PullBucketByTimeServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _V1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "winston.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertRepo",
			Handler:    _V1_UpsertRepo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _V1_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PullBucketByTime",
			Handler:       _V1_PullBucketByTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptorV1,
}

func (m *PullBucket) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PullBucket) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Repo) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintV1(data, i, uint64(len(m.Repo)))
		i += copy(data[i:], m.Repo)
	}
	if m.StartTime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintV1(data, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintV1(data, i, uint64(m.EndTime))
	}
	if len(m.BucketPath) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintV1(data, i, uint64(len(m.BucketPath)))
		i += copy(data[i:], m.BucketPath)
	}
	return i, nil
}

func (m *PullResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PullResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Repo) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintV1(data, i, uint64(len(m.Repo)))
		i += copy(data[i:], m.Repo)
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			data[i] = 0x12
			i++
			i = encodeVarintV1(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RepoSettings) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RepoSettings) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Repo) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintV1(data, i, uint64(len(m.Repo)))
		i += copy(data[i:], m.Repo)
	}
	if m.Format != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintV1(data, i, uint64(m.Format))
	}
	if len(m.DateField) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintV1(data, i, uint64(len(m.DateField)))
		i += copy(data[i:], m.DateField)
	}
	if len(m.HashField) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintV1(data, i, uint64(len(m.HashField)))
		i += copy(data[i:], m.HashField)
	}
	if m.Buckets != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintV1(data, i, uint64(m.Buckets))
	}
	return i, nil
}

func (m *PushRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PushRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Repo) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintV1(data, i, uint64(len(m.Repo)))
		i += copy(data[i:], m.Repo)
	}
	if len(m.Rows) > 0 {
		for _, msg := range m.Rows {
			data[i] = 0x12
			i++
			i = encodeVarintV1(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Row) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Row) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintV1(data, i, uint64(len(m.Data)))
		i += copy(data[i:], m.Data)
	}
	if m.Time != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintV1(data, i, uint64(m.Time))
	}
	return i, nil
}

func (m *EMPTY) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *EMPTY) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeFixed64V1(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32V1(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintV1(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PullBucket) Size() (n int) {
	var l int
	_ = l
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovV1(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovV1(uint64(m.EndTime))
	}
	l = len(m.BucketPath)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	return n
}

func (m *PullResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovV1(uint64(l))
		}
	}
	return n
}

func (m *RepoSettings) Size() (n int) {
	var l int
	_ = l
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if m.Format != 0 {
		n += 1 + sovV1(uint64(m.Format))
	}
	l = len(m.DateField)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	l = len(m.HashField)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if m.Buckets != 0 {
		n += 1 + sovV1(uint64(m.Buckets))
	}
	return n
}

func (m *PushRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Repo)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.Size()
			n += 1 + l + sovV1(uint64(l))
		}
	}
	return n
}

func (m *Row) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovV1(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovV1(uint64(m.Time))
	}
	return n
}

func (m *EMPTY) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovV1(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozV1(x uint64) (n int) {
	return sovV1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullBucket) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StartTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.EndTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RepoSettings) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RepoSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RepoSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			m.Format = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Format |= (RepoSettings_Format(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateField = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashField = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buckets", wireType)
			}
			m.Buckets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Buckets |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipV1(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipV1(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthV1
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], data[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowV1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Time |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipV1(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EMPTY) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowV1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EMPTY: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EMPTY: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipV1(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthV1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipV1(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowV1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowV1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthV1
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowV1
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipV1(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthV1 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowV1   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1.proto", fileDescriptorV1) }

var fileDescriptorV1 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0x26, 0x4e, 0xd2, 0x4c, 0xa3, 0x2a, 0x5a, 0x5a, 0xc9, 0x0a, 0x95, 0x65, 0xed, 0xc9,
	0x97, 0xba, 0x6d, 0x80, 0x0f, 0x20, 0x40, 0x0f, 0x48, 0x40, 0xb4, 0x2d, 0x20, 0x8e, 0x4e, 0xb3,
	0xb5, 0x2d, 0x12, 0xaf, 0xf1, 0xae, 0x31, 0xfc, 0x09, 0xbf, 0xc1, 0x5f, 0x54, 0xe2, 0xc2, 0x27,
	0x40, 0xf8, 0x11, 0xb4, 0xe3, 0x3a, 0x36, 0x22, 0xa7, 0xde, 0x66, 0xde, 0xdb, 0x79, 0x33, 0x6f,
	0x76, 0x60, 0xef, 0xf3, 0x79, 0x90, 0xe5, 0x52, 0x4b, 0x3a, 0x28, 0x93, 0x54, 0x69, 0x99, 0x4e,
	0x4e, 0xa2, 0x44, 0xc7, 0xc5, 0x22, 0xb8, 0x96, 0xeb, 0xd3, 0x48, 0x46, 0xf2, 0x14, 0xf9, 0x45,
	0x71, 0x83, 0x19, 0x26, 0x18, 0x55, 0x75, 0xec, 0x0b, 0xc0, 0xbc, 0x58, 0xad, 0x66, 0xc5, 0xf5,
	0x47, 0xa1, 0x29, 0x05, 0x3b, 0x17, 0x99, 0x74, 0x88, 0x47, 0xfc, 0x21, 0xc7, 0x98, 0x1e, 0xc3,
	0x50, 0xe9, 0x30, 0xd7, 0x57, 0xc9, 0x5a, 0x38, 0x1d, 0x8f, 0xf8, 0x36, 0x6f, 0x00, 0xea, 0xc0,
	0x40, 0xa4, 0x4b, 0xe4, 0xba, 0xc8, 0xd5, 0x29, 0x75, 0x01, 0x16, 0xa8, 0x3a, 0x0f, 0x75, 0xec,
	0xd8, 0xa8, 0xd8, 0x42, 0xd8, 0x73, 0x18, 0x99, 0xce, 0x5c, 0xa8, 0x4c, 0xa6, 0x4a, 0xec, 0xec,
	0xed, 0x81, 0x9d, 0xcb, 0x52, 0x39, 0x1d, 0xaf, 0xeb, 0xef, 0x4f, 0x47, 0xc1, 0x9d, 0xc9, 0x80,
	0xcb, 0x92, 0x23, 0xc3, 0x7e, 0x10, 0x18, 0x71, 0x91, 0xc9, 0x4b, 0xa1, 0x75, 0x92, 0x46, 0x6a,
	0xa7, 0xcc, 0x63, 0xe8, 0xdf, 0xc8, 0x7c, 0x1d, 0x6a, 0x9c, 0xff, 0x60, 0x7a, 0xdc, 0x08, 0xb5,
	0x4a, 0x83, 0x0b, 0x7c, 0xc3, 0xef, 0xde, 0x1a, 0xe3, 0xcb, 0x50, 0x8b, 0x8b, 0x44, 0xac, 0x96,
	0x68, 0x6e, 0xc8, 0x1b, 0xc0, 0xb0, 0x71, 0xa8, 0xe2, 0x8a, 0xad, 0xdc, 0x35, 0x80, 0x59, 0x4b,
	0x65, 0x55, 0x39, 0x3d, 0x8f, 0xf8, 0x3d, 0x5e, 0xa7, 0xec, 0x21, 0xf4, 0xab, 0x3e, 0x74, 0x00,
	0x5d, 0xfe, 0xf4, 0xfd, 0xd8, 0xa2, 0x7b, 0x60, 0xbf, 0xbc, 0x7c, 0xf3, 0x7a, 0x4c, 0xd8, 0x33,
	0xd8, 0x9f, 0x17, 0x2a, 0xe6, 0xe2, 0x53, 0x21, 0x94, 0xbe, 0xe7, 0x4a, 0x4e, 0xa0, 0xcb, 0x65,
	0x69, 0x8a, 0x97, 0xa1, 0x0e, 0xd1, 0xf2, 0x88, 0x63, 0x6c, 0x30, 0xdd, 0x7c, 0x15, 0xc6, 0x6c,
	0x00, 0xbd, 0x17, 0xaf, 0xe6, 0x57, 0x1f, 0xa6, 0xdf, 0x09, 0x74, 0xde, 0x9d, 0xd3, 0x33, 0xb0,
	0xcd, 0x0c, 0xf4, 0x70, 0x2b, 0xdd, 0x1a, 0x69, 0x72, 0xb0, 0x45, 0xb1, 0x88, 0x59, 0x3e, 0xa1,
	0x4f, 0x00, 0xde, 0x66, 0x4a, 0xe4, 0xda, 0x6c, 0x93, 0x1e, 0xed, 0x5c, 0xee, 0xff, 0x85, 0x74,
	0x06, 0xe3, 0xe6, 0xf4, 0x66, 0x5f, 0xf1, 0x68, 0x1e, 0xb4, 0x9a, 0xd6, 0xd4, 0xe4, 0xe8, 0x1f,
	0xb0, 0x3e, 0x18, 0x66, 0x9d, 0x91, 0xd9, 0xe1, 0xed, 0x6f, 0xd7, 0xba, 0xdd, 0xb8, 0xe4, 0xe7,
	0xc6, 0x25, 0xbf, 0x36, 0x2e, 0xf9, 0xf6, 0xc7, 0xb5, 0x16, 0x7d, 0xbc, 0xed, 0x47, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xcf, 0xc3, 0x69, 0x52, 0x1f, 0x03, 0x00, 0x00,
}
